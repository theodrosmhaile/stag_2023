as_data_frame()
ns3_test <- rep(ns3.test.mean,12) %>%
as.matrix() %>%
reshape(., 121,12) %>%
as_data_frame()
colnames(ns3_test) <- paste0('test3_', 1:12)
ns6_test <-  rep(ns6.test.mean,12) %>%
as.matrix() %>%
reshape(., 121,12) %>%
as_data_frame()
colnames(ns6_test) <- paste0('test6_', 1:12)
rlwm_data %<>%
cbind(ns3_test, ns6_test) %>%
mutate(subjects = Subjects %>% c()) %>%
drop_na()
write_csv(rlwm_data, 'RLWM_data_stag2023.csv')
}
rlwm_data %>% View
knitr::opts_chunk$set(
comment = "#>", echo = FALSE, warning = FALSE,
message = FALSE, dpi = 300
)
library(magrittr)
library(ggpubr)
library(MLmetrics)
library(matlab)
library(jsonlite)
library(tidyverse)
theme_set(theme_pubclean(base_size = 12))
get_data = function(data, data_name){
bind_rows(
c('set3_learn','set6_learn') %>%
map(~
#column is measurement at T, record is simulation
data %>%
.[[.x]] %>%
reduce(rbind) %>%
data.frame() %>%
mutate(condition = .x,
model_index= c(1:nrow(data))
)
) %>%
reduce(bind_rows) %>%
pivot_longer(cols = starts_with('x')
,values_to = 'accuracy', names_to = 'iteration'),
c('set3_test', 'set6_test') %>% #, 'bias' 'alpha','egs', 'bll', 'imag','ans'
map (~
{
temp = data %>%
.[[.x]]
data.frame(
model_index= c(1:nrow(data)),
condition=.x,
iteration=paste0('X', rep(c(1:12), nrow(data))),
accuracy=rep(temp, 12)
)
}
)
) %>%
mutate(data_source = data_name)
}
get_data_ml = function(data){
bind_rows(
c('n3','m3','n6','m6') %>%
map(~
#column is measurement at T, record is simulation
data %>%
.[[.x]] %>%
reduce(rbind) %>%
data.frame() %>%
mutate(condition = .x,
subjects= data$index #13 stim iterations X 4 conditions
)
) %>%
reduce(bind_rows) %>%
pivot_longer(cols = starts_with('x')
,values_to = 'accuracy', names_to = 'iteration'),
c('test3', 'test6') %>%
map (~
{
temp = data %>%
.[[.x]]
data.frame(
subjects= rep(data$index, 13),
condition=.x,
iteration=paste0('X', rep(c(1:13), nrow(data))),
accuracy=rep(temp, 13)
)
}
)
)
}
Andys_BIC <- function(rmse, k, n) {
# RSS first
#n = 48 #lean3 + learn 6 + (test3)*12 + (test6)*12
RSS <- ((rmse)^2) * n
# BIC next
bic <- n + (n * log(2*pi)) + (n * log(RSS/n)) + (log(n) * (k + 1))
return(bic)
}
fit.subject <- function(behav.dat, model.dat){
apply(model.dat, 1, function(x,y) MSE(x, behav.dat)) %>% sqrt()
}
fit.models.split <- function(model, half, setsize, params) {
#select model
# select subject data
if (half == 1) {
sdat = sdat.repl.h1
}
if(half ==2) {
sdat = sdat.repl.h2
}
# select setsize
if (setsize == 3) {
ns = 1:24
n_size = 'set3_'
}
if(setsize == 6){
ns = 25:48
n_size='set6_'
}
dat.learn = eval(
parse(text=paste0(model,'.sim$',n_size, 'learn')
)
) %>%
reduce(rbind)
dat.test =  matrix(
eval(
parse(text=paste0(model,'.sim$',n_size, 'test'))),
nrow = numel(eval(parse(text=paste0(model,'.sim$',n_size, 'test')))),
ncol = 12)
apply( sdat[, ns], 1,
function(x, y)
fit.subject(x,
(cbind(dat.learn, dat.test)
)
)) %>%
Andys_BIC(k = params, n = 24)
}
fit.models <- function(model, params) {
#select model
if (model == 'RL') {
sim.mod = RL.sim
}
if (model == 'LTM') {
sim.mod = LTM.sim
}
if (model == 'STR') {
sim.mod = STR.sim
}
if (model == 'META') {
sim.mod = META.sim
}
sim.learn = sim.mod$set3_learn %>%
reduce(rbind) %>%
cbind(sim.mod$set6_learn %>% reduce(rbind))
sim.test =  matrix(
sim.mod$set3_test,
nrow = numel(sim.mod$set3_test),
ncol = 12) %>%
cbind(matrix(
sim.mod$set6_test,
nrow = numel(sim.mod$set6_test),
ncol = 12))
apply( sdat %>% select(-subjects), 1,
function(x, y)
fit.subject(x,
(cbind(sim.learn, sim.test)
)
)) %>%
Andys_BIC(k = params, n = 48)
}
#import subject data
sdat <-  read_csv('RLWM_data_stag2023.csv')
#sdat <-  read_csv('meta_learning_group_first_half_dat.csv')
#import model data
RL.sim <- fromJSON('./simulated_data/RL_model/RL_sim_data_07_12_2022.JSON')$data %>% #RL_sim_data_07_12_2022.JSON
dplyr::mutate(bias = 0)
LTM.sim <- fromJSON('./simulated_data/LTM_model/LTM_sim_data_02202021.JSON')$data %>% #LTM_sim_data_02202021.JSON
dplyr::mutate(bias = 0 )
STR.sim <- fromJSON('./simulated_data/strategy_model/STR_sim_data_032021.JSON')$data %>%
dplyr::mutate(bias = str_remove_all(strtg, "[:alpha:]") %>% as.numeric()/100, .keep=c('unused'))
META.sim <- fromJSON('./simulated_data/pipe_model/pipe_sim_data_032021.JSON')$data %>%
dplyr::mutate(bias = strtg,
bias3 = strtg3,
bias6 = strtg6, .keep='unused')
##### extended sims
##########--------RL fits----------------############
RL.BIC <-  fit.models(model = 'RL', 2)
##########---------LTM FITS ----------------############
LTM.BIC<- fit.models('LTM',3)
##########---------RL-LTMstr FITS ----------------############
STR.BIC <- fit.models('STR', 6)
##########---------RL-LTMmeta FITS ----------------############
META.BIC <- fit.models('META',5)
all.models <-
rbind(
RL.BIC %>%
as_tibble() %>%
mutate(model='RL', model.id=c(1:nrow(RL.sim))),
LTM.BIC %>%
as_tibble() %>%
mutate(model='LTM',model.id=c(1:nrow(LTM.sim)) ),
STR.BIC %>%
as_tibble() %>%
mutate(model='STR', model.id=c(1:nrow(STR.sim)) ),
META.BIC %>% as_tibble() %>%
mutate(model='META', model.id=c(1:nrow(META.sim)) )
)
best.fits <-
all.models$model[all.models %>%
select(-contains('model')) %>%
apply(., 2, which.min)
] %>%
as_data_frame() %>%
mutate(model = value,
subjects = sdat$subjects,
.keep='unused')
best.fit.idx <-
all.models$model.id[all.models %>%
select(-contains('model')) %>%
apply(., 2, which.min)
] %>%
as_data_frame() %>%
mutate(index = value,
subjects = sdat$subjects,
.keep = 'unused')
best.fits %>%
dplyr::count(model) %>%
ggplot(aes(y=n, fill=model, x=model)) +
geom_bar(stat = 'identity') +
# facet_wrap(vars(name)) +
scale_fill_brewer(palette = 'Reds')+
ylab('Frequency')+
#geom_text( aes(y=c(5), label=freq, size=6, fill='red'), check_overlap = T, parse = T) +
theme_pubclean(base_size = 12)
best.fits %>%
dplyr::count(model) %>%
ggplot(aes(y=n, fill=model, x=model)) +
geom_bar(stat = 'identity') +
# facet_wrap(vars(name)) +
scale_fill_brewer(palette = 'Set1')+
ylab('Frequency')+
#geom_text( aes(y=c(5), label=freq, size=6, fill='red'), check_overlap = T, parse = T) +
theme_pubclean(base_size = 12)
str.bias = STR.sim$bias %>%
c()
meta.bias = META.sim$bias %>%
c()
str.bias[best.fit.idx[best.fits$model=='STR','index'] %>%
reduce(rbind)
] %>% as_data_frame() %>%
count(value) %>%
ggplot(aes(x=as.factor(value), y=n)) +
geom_bar(stat = 'identity') +
ggtitle("distribution of proportion of RL used in STR model")
meta.bias[best.fit.idx[best.fits$model=='META','index'] %>%
reduce(rbind)
] %>% as_data_frame()
best.fits %>%
dplyr::count(model) %>% as_tibble()
str.bias = STR.sim$bias %>%
c()
str.bias
str.bias[best.fit.idx[best.fits$model=='STR','index'] %>%
reduce(rbind)
] %>% as_data_frame() %>%
count(value)
str.bias %>% hist()
str.bias[best.fit.idx[best.fits$model=='STR','index'] %>% hist()
str.bias[best.fit.idx[best.fits$model=='STR','index'] %>%
reduce(rbind)
] %>% as_data_frame()
best.fits$model
meta.bias[best.fit.idx[best.fits$model=='META','index'] %>%
reduce(rbind)
] %>% as_data_frame()
meta.bias[best.fit.idx[best.fits$model=='META','index'] %>%
reduce(rbind)
] %>% as_data_frame() %>% hist
meta.bias[best.fit.idx[best.fits$model=='META','index'] %>%
reduce(rbind)
] %>% as_data_frame() %>%
ggplot(aes(value)) +
geom_histogram()
best.fits
best.fits %>% View
Subjects
# excluded subjects
# ---- 7532, 7519 don't know why yet
Subjects[c(33, 20,2)]=0
i=1
mean.acc.3 <- c()
mean.acc.6 <- c()
wmo.s <- c()
Missing.p <- c()
learningRate.3 <- c()
learningRate.6 <- c()
#Subjects=7515
#iterate through each subject here:
for (s in Subjects) {
OneSub <- wmodata$subject == s
if(any(OneSub)==1){
#rehsape script here: this reshapes response vector in to trial x block
#use these to find the trials
temp.sort.3 <- reshape(as.matrix(wmodata$seq[OneSub & ns3]),39,ns3.blks)
temp.sort.6 <- reshape(as.matrix(wmodata$seq[OneSub & ns6]),78,ns6.blks)
#these are the actual data.
temp.dat.3 <- reshape(as.matrix(wmodata$acc[OneSub & ns3]),39, ns3.blks)
temp.dat.6 <- reshape(as.matrix(wmodata$acc[OneSub & ns6]),78, ns6.blks)
#iterate through blocks here:
temp.cat.3 <- c()
temp.cat.6 <- c()
for (n in 1:ns3.blks) {
#iterate through items here
#temp.cat.3<- cbind(temp.cat.3,reshape(as.matrix(sort(temp.sort.3[,n])),13,3)) #accumulates across blocks
temp.cat.3<-cbind(temp.cat.3,cbind(as.matrix(temp.dat.3[temp.sort.3[,n]==1,n][1:12]),
as.matrix(temp.dat.3[temp.sort.3[,n]==2,n][1:12]),
as.matrix(temp.dat.3[temp.sort.3[,n]==3,n][1:12])
)
)
if(TRUE){
if (n <= ns6.blks) {
temp.cat.6<-cbind(temp.cat.6,cbind(as.matrix(temp.dat.6[temp.sort.6[,n]==1,n][1:12]),
as.matrix(temp.dat.6[temp.sort.6[,n]==2,n][1:12]),
as.matrix(temp.dat.6[temp.sort.6[,n]==3,n][1:12]),
as.matrix(temp.dat.6[temp.sort.6[,n]==4,n][1:12]),
as.matrix(temp.dat.6[temp.sort.6[,n]==5,n][1:12]),
as.matrix(temp.dat.6[temp.sort.6[,n]==6,n][1:12])
)
)
}
}
}
#clean missing values -1
temp.cat.6[temp.cat.6==-1]=0
temp.cat.3[temp.cat.3==-1]=0
#save subject
wmo.s[i] <- s
mean.acc.3 <-cbind(mean.acc.3,rowMeans(temp.cat.3,na.rm = FALSE)) # accumulates across subjects
mean.acc.6 <-cbind(mean.acc.6,rowMeans(temp.cat.6,na.rm = FALSE))
#print(length(rowMeans(temp.cat.6,na.rm = TRUE)))
#dataframes for model fits
tempframe.3 <- data.frame("accuracy" =rowMeans(temp.cat.3),
"iterations" = 1:12 )
tempframe.6 <- data.frame("accuracy" =rowMeans(temp.cat.6),
"iterations" = 1:12 )
temp.lm.3 <- lm(accuracy ~ poly(iterations,4), data = tempframe.3)
temp.lm.6 <- lm(accuracy ~ poly(iterations,4), data = tempframe.6)
if (0) {
plot(rowMeans(temp.cat.3),ylim = c(0,1),col = '#e41a1c',
cex=1,lwd=2,pch=19, xlab ='Stimulus presentations',
ylab ='Accuracy', main = s)
#c(s,   round(summary(temp.lm.3)$coefficients[4,1],3),round(summary(temp.lm.6)$coefficients[4,1],3)
#lines(rowMeans(temp.cat.3),ylim = c(0,1),col = 'green4',lwd=2)
points(rowMeans(temp.cat.6),ylim = c(0,1),col = '#377eb8',pch=19,cex=1,lwd=2)
#lines(rowMeans(temp.cat.6),ylim = c(0,1),col = 'orange',lwd=2)
legend("bottomright", c("set size 3", "set size 6"),pch = c( 19, 19),
text.col =c( "#e41a1c","#377eb8"), col = c("#e41a1c","#377eb8"))
lines(tempframe.3$iterations,temp.lm.3$fitted.values,lwd=2.3, col = '#e41a1c')
lines(tempframe.6$iterations,temp.lm.6$fitted.values,lwd=2.3, col = '#377eb8')
}
learningRate.3[i] <- round(summary(temp.lm.3)$coefficients[4,1],3)
learningRate.6[i] <- round(summary(temp.lm.6)$coefficients[4,1],3)
i = i+ 1
}
else {
#use this to track missing data
Missing.p[i] <-s
mean.acc.3 <-cbind(mean.acc.3,rep(NA,12)) # accumulates across subjects
mean.acc.6 <-cbind(mean.acc.6,rep(NA,12))
}
}
# set size 3 vs set size 6 performance indicator: subtract the two and take the average for each iteration point. A negative number indicates better performance, overall in set size 6, no difference if close to zero
wmo.learn.score <- colMeans(mean.acc.3-mean.acc.6)
ns3.test.mean <- c()
ns6.test.mean <- c()
i = 1
for (s in Subjects) {
OneSub <- wmotestdata$subject==s
ns3.test.mean[i] <- mean(wmotestdata[!is.na(match(wmotestdata[,"stim"],block.3)) & OneSub,"acc"])
ns6.test.mean[i] <- mean(wmotestdata[!is.na(match(wmotestdata[,"stim"],block.6)) & OneSub,"acc"])
i = i + 1
}
TestData=data.frame(ns3.test.mean,ns6.test.mean)
if(1){
mean.acc.3 %<>% t()
mean.acc.6 %<>% t()
colnames(mean.acc.3) = paste0('learn3_',1:12)
colnames(mean.acc.6) = paste0('learn6_',1:12)
rlwm_data <-  cbind(mean.acc.3, mean.acc.6) %>%
as_data_frame()
ns3_test <- rep(ns3.test.mean,12) %>%
as.matrix() %>%
reshape(., 121,12) %>%
as_data_frame()
colnames(ns3_test) <- paste0('test3_', 1:12)
ns6_test <-  rep(ns6.test.mean,12) %>%
as.matrix() %>%
reshape(., 121,12) %>%
as_data_frame()
colnames(ns6_test) <- paste0('test6_', 1:12)
rlwm_data %<>%
cbind(ns3_test, ns6_test) %>%
mutate(subjects = Subjects %>% c()) %>%
drop_na()
write_csv(rlwm_data, 'RLWM_data_stag2023_test.csv')
}
```{r fit models to data: h1h2Together}
#import subject data
sdat <-  read_csv('RLWM_data_stag2023_test.csv')
RL.sim <- fromJSON('./simulated_data/RL_model/RL_sim_data_07_12_2022.JSON')$data %>% #RL_sim_data_07_12_2022.JSON
dplyr::mutate(bias = 0)
LTM.sim <- fromJSON('./simulated_data/LTM_model/LTM_sim_data_02202021.JSON')$data %>% #LTM_sim_data_02202021.JSON
dplyr::mutate(bias = 0 )
STR.sim <- fromJSON('./simulated_data/strategy_model/STR_sim_data_032021.JSON')$data %>%
dplyr::mutate(bias = str_remove_all(strtg, "[:alpha:]") %>% as.numeric()/100, .keep=c('unused'))
META.sim <- fromJSON('./simulated_data/pipe_model/pipe_sim_data_032021.JSON')$data %>%
dplyr::mutate(bias = strtg,
bias3 = strtg3,
bias6 = strtg6, .keep='unused')
RL.BIC <-  fit.models(model = 'RL', 2)
LTM.BIC<- fit.models('LTM',3)
STR.BIC <- fit.models('STR', 6)
META.BIC <- fit.models('META',5)
all.models <-
rbind(
RL.BIC %>%
as_tibble() %>%
mutate(model='RL', model.id=c(1:nrow(RL.sim))),
LTM.BIC %>%
as_tibble() %>%
mutate(model='LTM',model.id=c(1:nrow(LTM.sim)) ),
STR.BIC %>%
as_tibble() %>%
mutate(model='STR', model.id=c(1:nrow(STR.sim)) ),
META.BIC %>% as_tibble() %>%
mutate(model='META', model.id=c(1:nrow(META.sim)) )
)
best.fits <-
all.models$model[all.models %>%
select(-contains('model')) %>%
apply(., 2, which.min)
] %>%
as_data_frame() %>%
mutate(model = value,
subjects = sdat$subjects,
.keep='unused')
best.fit.idx <-
all.models$model.id[all.models %>%
select(-contains('model')) %>%
apply(., 2, which.min)
] %>%
as_data_frame() %>%
mutate(index = value,
subjects = sdat$subjects,
.keep = 'unused')
best.fits
best.fits$model=='RL'
META.sim <- fromJSON('./simulated_data/pipe_model/pipe_sim_data_032021.JSON')$data %>%hghb6
log(4)
log(3)
log(2)
log(5)
round(log(4),3)
round(log(3),3)
round(log(3),3) + round(log(1),3)
round(log(4),3) + round(log(2),3)
round(log(3),3) + round(log(2),3)
round(log(3),3)
round(log(2),3)
round(log(2),3) *2
round(log(4),3)
1.386-2
2-1.386
1-1.386
round(log(2),3)
round(log(3),3)
0.7 -round(log(3),3)
0.7 -round(log(2),3)
1 -round(log(2),3)
1 -round(log(3),3)
1.2 -round(log(3),3)
1.1 -round(log(3),3)
c(1.1:1.7)
2 -round(log(3),3)
c(1.1, 1.4, 1.7, 2)-round(log(3),3)
plot(c(1:4),c(1.1, 1.4, 1.7, 2)-round(log(3),3))
plot(c(1.1, 1.4, 1.7, 2),c(1.1, 1.4, 1.7, 2)-round(log(3),3))
c(1,1.2, 1.4, 1.8, 2)-round(log(3),3)
c(1,1.2, 1.4, 1.8, 2)-round(log(9),3)
round(log(9),3)
round(log(10),3)
round(log(7),3)
round(log(8),3)
4-round(log(8),3)
4-round(log(9),3)
4-round(log(4),3)
4-log(4)
4-log(3)
4-log(5)
4-log(11)
4-log(12)
4-log(6)
4-log(18)
2-log(18)
2-log(13)
2-log(12)
log(12)
log(11)
log(12)
3-log(12)
