(defvar *trial* nil)     ;; array to hold the trial information(defvar *strsizes* nil)  ;; array to hold the length of the strings on each trial(defvar *data* nil)      ;; array to hold the characters for each string;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Function: load-trial();; Does: Reads the trial information in from a file and puts it in the ;;       *trial* array. The first element is either 4 or 6 and determines;;       whether this is a long or short string trial. The second element is;;       3, 4, 5, or 6 and is the number of strings. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defun load-trial()  (setf *trial* (make-array '(67 2) :element-type 'fixnum))  (with-open-file (in (merge-pathnames "Tounces:MCL 4.2:s98trial.txt"))    (dotimes (i 67)      (dotimes (j 2)        (setf (aref *trial* i j) (read in))))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Function: load-strings();; Does: Holds the length of each string. String lengths are 2, 3, 4, or 5.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defun load-strings()  (setf *strsizes* (make-array '(67 6) :element-type 'fixnum :initial-element 0))  (with-open-file (in (merge-pathnames "Tounces:MCL 4.2:s98str.txt"))    (dotimes (i 67)      (dotimes (j 6)        (setf (aref *strsizes* i j) (read in))))))(defun look-strings()  (dotimes (i 67)    (format t "~A~T~A~T~A~T~A~T~A~T~A~%" (aref *strsizes* i 0) (aref *strsizes* i 1) (aref *strsizes* i 2) (aref *strsizes* i 3) (aref *strsizes* i 4) (aref *strsizes* i 5))) );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defun load-data()  (setf *data* (make-array '(298 6)))  (with-open-file (in (merge-pathnames "Tounces:MCL 4.2:s98data.txt"))    (dotimes (i 298)      (dotimes (j 6)        (setf (aref *data* i j) (read in))))))(defun look-data()  (dotimes (i 298)    (format t "~A~T~A~T~A~T~A~T~A~T~A~%" (aref *data* i 0) (aref *data* i 1) (aref *data* i 2) (aref *data* i 3) (aref *data* i 4) (aref *data* i 5))) )